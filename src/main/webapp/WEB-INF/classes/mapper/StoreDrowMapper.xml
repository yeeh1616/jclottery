<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jingc.busi.common.mapper.StoreDrowMapper" >
  <resultMap id="BaseResultMap" type="com.jingc.busi.common.table.StoreDrow" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="store_id" property="storeId" jdbcType="INTEGER" />
    <result column="store_name" property="storeName" jdbcType="VARCHAR" />
    <result column="money" property="money" jdbcType="DOUBLE" />
    <result column="bank_account" property="bankAccount" jdbcType="VARCHAR" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="bank_user_name" property="bankUserName" jdbcType="VARCHAR" />
    <result column="operator_id" property="operatorId" jdbcType="INTEGER" />
    <result column="operator_name" property="operatorName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
    <result column="operator_time" property="operatorTime" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="comments" property="comments" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="reserved1" property="reserved1" jdbcType="VARCHAR" />
    <result column="reserved2" property="reserved2" jdbcType="VARCHAR" />
    <result column="reserved3" property="reserved3" jdbcType="VARCHAR" />
    <result column="reserved4" property="reserved4" jdbcType="VARCHAR" />
    <result column="reserved5" property="reserved5" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, store_id, money, bank_account, bank_name, bank_user_name, operator_id, operator_name, 
    create_time, operator_time, state, comments, user_id, reserved1, reserved2, reserved3, reserved4, 
    reserved5
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from store_drow
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from store_drow
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.jingc.busi.common.table.StoreDrow" useGeneratedKeys="true" keyProperty="id">
    insert into store_drow (id, store_id, money, 
      bank_account, bank_name, bank_user_name, 
      operator_id, operator_name, create_time, 
      operator_time, state, comments, user_id,
      reserved1, reserved2, reserved3, 
      reserved4, reserved5)
    values (#{id,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, #{money,jdbcType=DOUBLE}, 
      #{bankAccount,jdbcType=VARCHAR}, #{bankName,jdbcType=VARCHAR}, #{bankUserName,jdbcType=VARCHAR}, 
      #{operatorId,jdbcType=INTEGER}, #{operatorName,jdbcType=VARCHAR}, #{createTime,jdbcType=VARCHAR}, 
      #{operatorTime,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{comments,jdbcType=VARCHAR},#{userId,jdbcType=VARCHAR}, 
      #{reserved1,jdbcType=VARCHAR}, #{reserved2,jdbcType=VARCHAR}, #{reserved3,jdbcType=VARCHAR}, 
      #{reserved4,jdbcType=VARCHAR}, #{reserved5,jdbcType=VARCHAR})
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.jingc.busi.common.table.StoreDrow" >
    update store_drow
    <set >
      <if test="storeId != null" >
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=DOUBLE},
      </if>
      <if test="bankAccount != null" >
        bank_account = #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null" >
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankUserName != null" >
        bank_user_name = #{bankUserName,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null" >
        operator_id = #{operatorId,jdbcType=INTEGER},
      </if>
      <if test="operatorName != null" >
        operator_name = #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="operatorTime != null" >
        operator_time = #{operatorTime,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="comments != null" >
        comments = #{comments,jdbcType=VARCHAR},
      </if>
      <if test="reserved1 != null" >
        reserved1 = #{reserved1,jdbcType=VARCHAR},
      </if>
      <if test="reserved2 != null" >
        reserved2 = #{reserved2,jdbcType=VARCHAR},
      </if>
      <if test="reserved3 != null" >
        reserved3 = #{reserved3,jdbcType=VARCHAR},
      </if>
      <if test="reserved4 != null" >
        reserved4 = #{reserved4,jdbcType=VARCHAR},
      </if>
      <if test="reserved5 != null" >
        reserved5 = #{reserved5,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER} and state = 1
  </update>

  <select id="selectStoreDrowListByPage" resultMap="BaseResultMap">
    select 
    store_drow.id, store_drow.store_id, store.store_name, store_drow.money, store_drow.bank_account, store_drow.bank_name, store_drow.bank_user_name, store_drow.operator_id, store_drow.operator_name, 
    store_drow.create_time, store_drow.operator_time, store_drow.state, store_drow.comments, store_drow.user_id, store_drow.reserved1, store_drow.reserved2, store_drow.reserved3, store_drow.reserved4, 
    store_drow.reserved5, store_user.user_name 
    from store_drow left join store on store_drow.store_id = store.store_id 
    left join store_user on store_user.user_id = store_drow.user_id
    <where>
	  <if test="param.state != null and param.state != 0">
	  store_drow.state = #{param.state}
	  </if>
	  <if test="(param.createTimeBegin != null and param.createTimeBegin !='') and (param.createTimeEnd != null and param.createTimeEnd !='')">
     	and (store_drow.create_time between CONCAT(#{param.createTimeBegin}," 00:00:00") and CONCAT(#{param.createTimeEnd}," 23:59:59")) 
    </if>
    <if test="(param.createTimeBegin != null and param.createTimeBegin !='') and (param.createTimeEnd == null or param.createTimeEnd =='')"> 
    	and store_drow.create_time &gt; CONCAT(#{param.createTimeBegin}," 00:00:00") 
    </if>
    <if test="(param.createTimeBegin == null or param.createTimeBegin =='') and (param.createTimeEnd != null and param.createTimeEnd !='')">
     	and store_drow.create_time &lt; CONCAT(#{param.createTimeEnd}," 23:59:59") 
    </if>
	</where>
    order by store_drow.id desc 
    limit #{pagination.firstResult},#{pagination.pageSize}
  </select>
  
  <select id="selectStoreDrowCount" resultType="java.lang.Integer">
  select count(*) from store_drow
  	<where>
	  <if test="param.state != null and param.state != 0">
	  store_drow.state = #{param.state}
	  </if>
	  <if test="(param.createTimeBegin != null and param.createTimeBegin !='') and (param.createTimeEnd != null and param.createTimeEnd !='')">
     	and (store_drow.create_time between CONCAT(#{param.createTimeBegin}," 00:00:00") and CONCAT(#{param.createTimeEnd}," 23:59:59")) 
    </if>
    <if test="(param.createTimeBegin != null and param.createTimeBegin !='') and (param.createTimeEnd == null or param.createTimeEnd =='')"> 
    	and store_drow.create_time &gt; CONCAT(#{param.createTimeBegin}," 00:00:00") 
    </if>
    <if test="(param.createTimeBegin == null or param.createTimeBegin =='') and (param.createTimeEnd != null and param.createTimeEnd !='')">
     	and store_drow.create_time &lt; CONCAT(#{param.createTimeEnd}," 23:59:59") 
    </if>
	</where>
  </select>
  
  
  <!-- 查询店铺提款单ZLP -->
  <select id="selectByObject" resultMap="BaseResultMap">
  select <include refid="Base_Column_List"/>,
  (select user_name from store_user where user_id = store_drow.user_id) user_name 
  from store_drow
  <where>
  	<if test="param.storeId != null and param.storeId != ''"> store_id = #{param.storeId}</if>
  	<if test="param.state != null and param.state != ''">
  		and state = #{param.state}
  	</if>
  	<if test="param.stateList != null and param.stateList.size() > 0">
  		and state in
  		<foreach collection="param.stateList" item="item" open="(" separator="," close=")">#{item}</foreach>
  	</if>
  	<if test="(param.createTimeBegin != null and param.createTimeBegin != '') and (param.createTimeEnd != null and param.createTimeEnd != '')">
  	 and create_time between (CONCAT(#{param.createTimeBegin}," 00:00:00") and CONCAT(#{param.createTimeEnd}," 23:59:59"))
  	</if>
  	<if test="(param.createTimeBegin != null and param.createTimeBegin != '') and (param.createTimeEnd == null or param.createTimeEnd == '')">
  	and create_time &gt; CONCAT(#{param.createTimeBegin}," 00:00:00")
  	</if>
  	<if test="(param.createTimeBegin == null or param.createTimeBegin != '') and (param.createTimeEnd != null and param.createTimeEnd != '')">
  	and create_time &lt; CONCAT(#{param.createTimeEnd}," 23:59:59")
  	</if>
  	<if test="(param.operatorTimeBegin != null and param.operatorTimeBegin != '') and (param.operatorTimeEnd != null and param.operatorTimeEnd != '')">
  	 and operator_time between (CONCAT(#{param.operatorTimeBegin}," 00:00:00") and CONCAT(#{param.operatorTimeEnd}," 23:59:59"))
  	</if>
  	<if test="(param.operatorTimeBegin != null and param.operatorTimeBegin != '') and (param.operatorTimeEnd == null or param.operatorTimeEnd == '')">
  	and operator_time &gt; CONCAT(#{param.operatorTimeBegin}," 00:00:00")
  	</if>
  	<if test="(param.operatorTimeBegin == null or param.operatorTimeBegin != '') and (param.operatorTimeEnd != null and param.operatorTimeEnd != '')">
  	and operator_time &lt; CONCAT(#{param.operatorTimeEnd}," 23:59:59")
  	</if>
  </where>
  	order by create_time desc,operator_time desc limit #{pagination.firstResult},#{pagination.pageSize}
  </select>
  <!-- 查询店铺提款单条目数ZLP -->
  <select id="selectWCountByObject" resultType="java.lang.Integer">
  select count(*) from store_drow
  <where>
  	<if test="param.storeId != null and param.storeId != ''"> store_id = #{param.storeId}</if>
  	<if test="param.state != null and param.state != ''">
  		and state = #{param.state}
  	</if>
  	<if test="param.stateList != null and param.stateList.size() > 0">
  		and state in
  		<foreach collection="param.stateList" item="item" open="(" separator="," close=")">#{item}</foreach>
  	</if>
  	<if test="(param.createTimeBegin != null and param.createTimeBegin != '') and (param.createTimeEnd != null and param.createTimeEnd != '')">
  	 and create_time between (CONCAT(#{param.createTimeBegin}," 00:00:00") and CONCAT(#{param.createTimeEnd}," 23:59:59"))
  	</if>
  	<if test="(param.createTimeBegin != null and param.createTimeBegin != '') and (param.createTimeEnd == null or param.createTimeEnd == '')">
  	and create_time &gt; CONCAT(#{param.createTimeBegin}," 00:00:00")
  	</if>
  	<if test="(param.createTimeBegin == null or param.createTimeBegin != '') and (param.createTimeEnd != null and param.createTimeEnd != '')">
  	and create_time &lt; CONCAT(#{param.createTimeEnd}," 23:59:59")
  	</if>
  	<if test="(param.operatorTimeBegin != null and param.operatorTimeBegin != '') and (param.operatorTimeEnd != null and param.operatorTimeEnd != '')">
  	 and operator_time between (CONCAT(#{param.operatorTimeBegin}," 00:00:00") and CONCAT(#{param.operatorTimeEnd}," 23:59:59"))
  	</if>
  	<if test="(param.operatorTimeBegin != null and param.operatorTimeBegin != '') and (param.operatorTimeEnd == null or param.operatorTimeEnd == '')">
  	and operator_time &gt; CONCAT(#{param.operatorTimeBegin}," 00:00:00")
  	</if>
  	<if test="(param.operatorTimeBegin == null or param.operatorTimeBegin != '') and (param.operatorTimeEnd != null and param.operatorTimeEnd != '')">
  	and operator_time &lt; CONCAT(#{param.operatorTimeEnd}," 23:59:59")
  	</if>
  </where>
  </select>  
</mapper>